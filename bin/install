#!/usr/bin/env bash
set -x
# this is global for error reporting
ASDF_JAVA_ERROR=""

# Download the java source from java.net, copy files and cleanup.
install_java() {
	local version=$1
	local destdir=$2

	local arch=$(get_arch)
	[[ -z "$ASDF_JAVA_ERROR" ]] || return

	get_java "$version" "$arch" "$destdir"
	[[ -z "$ASDF_JAVA_ERROR" ]] || return

	unpack_java $destdir
	[[ -z "$ASDF_JAVA_ERROR" ]] || return
}

# Get the "arch" piece of the Oracle url.
get_arch() {
	case "$(uname -s)" in
		Linux)
			case "$(uname -m)" in
				x86_64) echo Linux ;;
				*) ASDF_JAVA_ERROR="$(uname -m) is not supported on linux" ;;
			esac ;;
		Darwin)
			case "$(uname -m)" in
				x86_64) echo Mac ;;
				*) ASDF_JAVA_ERROR="$(uname -m) is not supported on macos" ;;
			esac ;;
		*) ASDF_JAVA_ERROR="$(uname -s) is not supported" ;;
	esac
}

# Download java from java.net
get_java() {
	local version=$1
	local arch=$2
	local destdir=$3

    local url

	if [ $version == o* ]; then
		local oversion=$(echo $version | tail -c+2)
	    local main_version=$(echo $oversion | cut -d. -f1)
		local oarch=$([ $arch = Linux ] && echo linux || echo osx)
    	url=https://download.java.net/java/GA/jdk$main_version/$oversion/binaries/openjdk-${oversion}_$oarch-x64_bin.tar.gz
	elif [ $version == graalvm* ]; then
    	url=https://github.com/oracle/graal/releases/download/vm-1.0.0-rc2/graalvm-ce-1.0.0-rc2-linux-amd64.tar.gz
	else
		local main_version=$(echo $version | sed -E "s/^([0-9]+).*/\1/g")
		local other=$([ "$main_version" == 8 ] && echo "" || echo "-")
		local escaped_version=$(echo $version | sed "s/\./%2B/g")
		url=https://github.com/AdoptOpenJDK/openjdk$main_version-releases/releases/download/jdk$other$escaped_version/OpenJDK${main_version}_x64_${arch}_jdk$other$version.tar.gz
	fi

	echo "---- ASDF JAVA MESSAGE ----"
	echo "downloading: $url"

	curl -fLC - \
		--progress-bar \
		--retry 3 --retry-delay 3 \
		-b oraclelicense=a \
		-o $destdir/asdfjdk.tar.gz $url

	[[ $? != 0 ]] && ASDF_JAVA_ERROR="downloading java dist"
}

# Unpacks all kinds of sources.
unpack_java() {
	local destdir=$1

	echo "---- ASDF JAVA MESSAGE ----"
	echo "expanding java dist"

# Unarchive a tar archive into the install directory and cleanup.
#
# NOTE: Using $origin as a memo rather than executing in a subshell
#   because errors won't be persisted from a subshell.
#
# TODO: Should be sanitized with error reporting.
	local origin=$(pwd)
	cd $destdir; {
		tar -xzf asdfjdk.tar.gz
		[[ $? == 0 ]] || ASDF_JAVA_ERROR="expanding java dist"
		rm asdfjdk.tar.gz

		local pkg=$(find . -name bin -exec dirname {} \;)
		[[ $? == 0 ]] || ASDF_JAVA_ERROR="retrieving jdk folder"
		mv $pkg/* .
		rm -rf jdk-*
	}; cd $origin
}

#
# MAIN
#
echo $ASDF_INSTALL_PATH
install_java $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH

if ! [[ -z "$ASDF_JAVA_ERROR" ]]; then
	rm -rf $ASDF_INSTALL_PATH

	echo "---- ASDF JAVA ERROR ----"
	echo "asdf java failed while $ASDF_JAVA_ERROR"
	echo "----"
fi
unset ASDF_JAVA_ERROR
